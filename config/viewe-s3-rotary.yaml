esphome:
  name: viewe-c3-rotary


# Example configuration entry
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino



# Enable logging for debugging
logger:

# Enable the Home Assistant API
api:
    on_client_connected:
        -   if:
                condition:
                    lambda: 'return (0 == client_info.find("Home Assistant "));'
                then:
                    -   lvgl.widget.show: lbl_hastatus
    on_client_disconnected:
        -   if:
                condition:
                    lambda: 'return (0 == client_info.find("Home Assistant "));'
                then:
                    -   lvgl.widget.hide: lbl_hastatus

# Enable over-the-air updates
ota:
  - platform: esphome

wifi:
    ssid: !secret wifi_ssid
    password: !secret wifi_pw

# This is the ROTATION part of the knob
sensor:
  - platform: rotary_encoder
    name: "LVGL Control Encoder"
    id: rotary_encoder_sensor
    pin_a: GPIO6
    pin_b: GPIO7
    resolution: 2
    on_clockwise:
        - lambda: !lambda |-
              // Check if the active screen is the select page
              if (lv_disp_get_scr_act(NULL) == id(select_page)->obj) {
                // Pass the raw object pointer to the LVGL function
                lv_roller_set_selected(id(roller_id)->obj, lv_roller_get_selected(id(roller_id)->obj) + 1, LV_ANIM_ON);
              }
        - lvgl.update:
            disp_bg_color: 0x0000FF
    on_anticlockwise:
        - lambda: !lambda |-
            // Check if the active screen is the select page
            if (lv_disp_get_scr_act(NULL) == id(select_page)->obj) {
              // Pass the raw object pointer to the LVGL function
              lv_roller_set_selected(id(roller_id)->obj, lv_roller_get_selected(id(roller_id)->obj) - 1, LV_ANIM_ON);
            }
        - lvgl.update:
            disp_bg_color: 0x0000FF

# Buttons
binary_sensor:
  - platform: gpio
    name: "Button - Middle"
    pin:
      number: GPIO9
      inverted: true
      mode:
          input: true
          pullup: true
    on_press:
      then:
        - if:
            # Condition: Check if we are currently on the select page
            condition:
              lambda: 'return lv_disp_get_scr_act(NULL) == id(select_page)->obj;'
            # If TRUE: We're on the roller page, so confirm the selection.
            then:
              # Action 1: Call the HA service to update the original select entity
                - lambda: |-
                        ESP_LOGD("main", "Confirming selection and exiting edit mode.");
#                        id(edit_mode_active) = false;
                - homeassistant.action:
                      action: select.select_option
                      data_template:
                        entity_id: select.evcc_warp_3_mode
                        option: !lambda |-
                            // <<< MODIFICATION: MAP FROM INDEX TO MACHINE VALUE
                            // Define the machine-readable values in the exact same order as the roller options.
                            const char *machine_values[] = {"off", "pv", "minpv", "now"};
                            
                            // Get the numerical index of the selected item on the roller.
                            int selected_index = lv_roller_get_selected(id(roller_id)->obj);
                            
                            // Return the machine value from the array at that index.
                            return std::string(machine_values[selected_index]);
#                        option: !lambda |-
#                          char buf[32];
#                          lv_roller_get_selected_str(id(roller_id)->obj, buf, sizeof(buf));
#                            ESP_LOGD("main", "Running the service-lambda now...");
#                          return std::string(buf);
                - lambda: !lambda 'lv_scr_load(id(main_page)->obj);'

            else:
              - lambda: !lambda 'lv_scr_load(id(select_page)->obj);'
        - lvgl.update:
              disp_bg_color: 0x0000FF

# Backlight and WS2812 Power Supply
output:
  - platform: ledc
    pin: GPIO8
    id: backlight_output
    inverted: true

light:
  - platform: monochromatic
    output: backlight_output
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
    initial_state:
        brightness: 80%
        color_mode: BRIGHTNESS


spi:
  clk_pin: GPIO1
  mosi_pin: GPIO0

display:
  - platform: ili9xxx
    id: disp
#    show_test_card: true
    dimensions:
      height: 240
      width: 240
#      offset_height: 1
#      offset_width: 2
    model: GC9A01A
    data_rate: 40MHz
    cs_pin: GPIO10
    dc_pin: GPIO4
#    reset_pin: GPIO5
    reset_pin: GPIO2
    invert_colors: true



lvgl:
    log_level: INFO
    color_depth: 16
    bg_color: 0
    border_width: 0
    outline_width: 0
    text_font: unscii_16
    align: center
    style_definitions:
      - id: my_style
        text_font: roboto_icons_42
        align: center
        text_color: 0xFFFFFF
        bg_opa: TRANSP
        bg_color: 0
      - id: roller_style
        bg_color: "0xFF0000"
#        radius: 4
#        pad_all: 2
    top_layer:
        widgets:
            - label:
                text: "\uF1EB"
                id: lbl_hastatus
                hidden: true
                align: top_right
                x: -2
                y: 7
                text_align: right
                text_color: 0xFFFFFF
    page_wrap: true
    pages:
        - id: main_page
          widgets:
            - label:
                  styles: my_style
                  id: label_current_mode
                  long_mode: WRAP
                  width: SIZE_CONTENT
                  height: SIZE_CONTENT
                  align: center
                  text: "Loading..." # Changed initial text
#            - obj: # Container
##                height: 240
##                width: 240
#                align: center
#                bg_color: 0
#                border_width: 0
#                outline_width: 0
#                pad_all: 0
#                scrollbar_mode: "off"
#                widgets:
#                  - label:
#                      styles: my_style
#                      id: label_current_mode
#                      long_mode: SCROLL
#                      align: center
#                      text: "Loading..." # Changed initial text

        # --- THIS IS THE SECOND PAGE ---
        - id: select_page
          widgets:
            - roller:
                  align: CENTER
                  id: roller_id
                  styles:
                    - my_style
                  visible_row_count: 4
                  width: 240
                  height: 240
                  radius: 120
                  pad_all: 50
                  border_opa: 0
                  outline_opa: 0
                  shadow_opa: 0
                  bg_opa: 0
                  clip_corner: true
                  options: # <<< CHANGE THESE TO BE HUMAN-READABLE
                      - "\U000F125D Aus"
                      - "\U000F1A73 PV"
                      - "\U000F0A72 PV+"
                      - "\U000F140B Sofort"

font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 48
    bpp: 4
  - file: "fonts/RobotoCondensed-Regular.ttf"
    id: roboto_icons_42
    size: 42
    bpp: 4
    extras:
      - file: "fonts/materialdesignicons-webfont.ttf"
        glyphs: [
          "\U000F02D1", # mdi-heart
          "\U000F05D4", # mdi-airplane-landing
          "\U000F05A8", # white-balance-sunny
          "\U000F0A72", # solar-power
          "\U000F140B", # lightning-bolt
          "\U000F125D", # battery-off
          "\U000F1A73", # solar-power-variant
          ]
#  - file: "fonts/Montserrat-Regular.ttf"
#    id: montserrat_icons_42
#    size: 42
#    bpp: 4
#    extras:
#      - file: "fonts/materialdesignicons-webfont.ttf"
#        glyphs: [
#          "\U000F02D1", # mdi-heart
#          "\U000F05D4", # mdi-airplane-landing
#          "\U000F05A8", # white-balance-sunny
#          ]

# LVGL Select - binds directly to the roller widget
select:
  - platform: lvgl
    widget: roller_id
    name: "EVCC Mode Select"
    id: evcc_mode_select
    on_value:
      then:
        # 1. Send the new value to Home Assistant
        - homeassistant.service:
            service: select.select_option
            data:
              entity_id: select.evcc_warp_3_mode
              # 'x' contains the selected option text (e.g., "pv")
              option: !lambda 'return x;'
        # 2. Also update the label on your main page immediately
        - lambda: !lambda |-
              if (x.c_str() != lv_label_get_text(id(label_current_mode))) {
                lv_label_set_text(id(label_current_mode), x.c_str());
              }

# Text sensor for Home Assistant integration
text_sensor:
  - platform: homeassistant
    entity_id: select.evcc_warp_3_mode
    id: ha_evcc_mode_text
    on_value:
      then:
        - lambda: !lambda |-
            // <<< MODIFICATION: FULL MAPPING LOGIC
            // Define both machine and human-readable values in the same order.
            const char *machine_values[] = {"off", "pv", "minpv", "now"};
            const char *human_readable_values[] = {"\U000F125D Aus", "\U000F1A73 PV", "\U000F0A72 PV+", "\U000F140B Sofort"};
            int num_options = sizeof(machine_values) / sizeof(machine_values[0]);

            // Ignore invalid states from Home Assistant
            if (x.empty() || x == "unknown") {
              return;
            }

            // Find the index that matches the machine value from Home Assistant (x)
            for (int i = 0; i < num_options; i++) {
              if (strcmp(x.c_str(), machine_values[i]) == 0) {
                // We found a match at index 'i'!

                // 1. Update the label on the main page with the human-readable text.
                lv_label_set_text(id(label_current_mode), human_readable_values[i]);

                // 2. Set the roller's visual selection to this index.
                lv_roller_set_selected(id(roller_id)->obj, i, LV_ANIM_OFF);
                
                break; // Exit the loop since we found our match
              }
            }